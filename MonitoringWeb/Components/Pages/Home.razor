@page "/"

@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR.Client
@using MonitoringWeb.Model
@using MonitoringWeb.Redis
@using MonitoringWeb.Service

@inject NavigationManager Navigation
@inject ICacheService CacheService
@inject IHttpContextAccessor HttpContextAccessor

@implements IAsyncDisposable

<h1>Client monitoring</h1>

<div @ref="listContainer">
    @if (_records == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!_records.Any())
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Hostname</th>
                    <th>IP</th>
                    <th>Operating system</th>
                    <th>CPU</th>
                    <th>Used memory</th>
                    <th>Total memory </th>
                    <th>Uptime</th>
                    <th>Time</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in _records)
                {
                    <ListItemComponent Item="@record" />
                }
            </tbody>
        </table>

        <div class="paging-controls">
            <button @onclick="FirstPage"
                    class="paging-btn @(CanGoToPreviousPage ? "paging-btn-primary" : "paging-btn-secondary")"
                    disabled="@(CanGoToPreviousPage ? null : "disabled")">
                First
            </button>

            <button @onclick="PreviousPage"
                    class="paging-btn @(CanGoToPreviousPage ? "paging-btn-primary" : "paging-btn-secondary")"
                    disabled="@(CanGoToPreviousPage ? null : "disabled")">
                Previous
            </button>

            <span class="paging-text">Page @_currentPage of @_totalPages</span>

            <button @onclick="NextPage"
                    class="paging-btn @(CanGoToNextPage ? "paging-btn-primary" : "paging-btn-secondary")"
                    disabled="@(CanGoToNextPage ? null : "disabled")">
                Next
            </button>

            <button @onclick="LastPage"
                    class="paging-btn @(CanGoToNextPage ? "paging-btn-primary" : "paging-btn-secondary")"
                    disabled="@(CanGoToNextPage ? null : "disabled")">
                Last
            </button>

            <div id="item-count-select-bottom">
                <label>Items per page:</label>
                <select @onchange="OnPageSizeSelectChange">
                    @foreach (var selectValue in _actualSelectValues)
                    {
                        <!-- _actualSelectValues is an int list, but beware that the selected value will be passed on as a string to OnPageSizeSelectChange function -->
                        <option value=@selectValue selected="@(GetPageSizeFromSession() == $"{selectValue}" ? "selected" : null)">@selectValue</option>
                    }
                    <option value=@All selected="@(GetPageSizeFromSession() == All ? "selected" : null)">All</option>

                </select>

                <span>of @_totalRecords</span>
            </div>
        </div>
    }
</div>

@code {
    private ElementReference listContainer;
    private List<SystemInfoRecord>? _records;
    private HubConnection? _hubConnection;

    private const string All = "All";
    private const string _pageSizeSessionKey = "SelectedPageSize";

    private int _currentPage = 1;
    private int _totalPages;
    private int _pageSize;
    private int _totalRecords;
    private string _selectedPageSize { get; set; } = All;

    private readonly int[] _possibleSelectValues = { 10, 25, 50, 100, 150 };
    private List<int> _actualSelectValues = new();

    private Dictionary<string, int> _selectMap = new()
    {
        { "10", 10 },
        { "25", 25 },
        { "50", 50 },
        { "100", 100 },
        { "150", 150 },
        { All, -1 }
    };

    private bool CanGoToPreviousPage => _currentPage > 1;
    private bool CanGoToNextPage => _currentPage < _totalPages;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/datahub"), options =>
            {
                options.Transports = Microsoft.AspNetCore.Http.Connections.HttpTransportType.WebSockets;
            })
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On("NotifyDataUpdate:all", async () =>
        {
            await LoadData();
            Thread.Sleep(500); //Give some time to update the new data before the ui is refreshed
            await InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private async Task LoadData()
    {
        _totalRecords = CacheService.GetTotalRecordCount();
        _selectMap[All] = _totalRecords; //Set the "All" mapping to the total number of possible records

        // Populate _selectValues with only the values that are less than or equal to _totalRecordCount
        _actualSelectValues = _possibleSelectValues.Where(v => v <= _totalRecords).ToList();

        _selectedPageSize = GetPageSizeFromSession();
        _pageSize = _selectMap[_selectedPageSize];
        if (_pageSize == 0) _pageSize = _totalRecords;

        var pagedRecords = await CacheService.GetPagedAsync<SystemInfoRecord>(_currentPage, _pageSize, _totalRecords);
        if (pagedRecords == null) return;

        // Calculate the number of pages
        _totalPages = (int)Math.Ceiling(_totalRecords / (double)_pageSize);

        _records = pagedRecords;
    }

    private async Task OnPageSizeSelectChange(ChangeEventArgs eventArgs)
    {
        _selectedPageSize = eventArgs.Value?.ToString() ?? All;
        //_pageSize = _selectMap[_selectedPageSize]; //not needed? happens in LoadData()

        _currentPage = 1;
        //TODO: also session save the selected page

        //Session save the selected page size value
        SetPageSizeForSession();

        await LoadData();
        await InvokeAsync(StateHasChanged);
    }

    private string GetPageSizeFromSession()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            return httpContext.Session.GetString(_pageSizeSessionKey) ?? All;
        }

        return All;
    }

    private void SetPageSizeForSession()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext != null)
        {
            httpContext.Session.SetString(_pageSizeSessionKey, _selectedPageSize);
        }
    }

    #region Navigation
    private async Task FirstPage()
    {
        if (CanGoToPreviousPage)
        {
            _currentPage = 1;
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            _currentPage--;
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task NextPage()
    {
        if (CanGoToNextPage)
        {
            _currentPage++;
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LastPage()
    {
        if (CanGoToNextPage)
        {
            _currentPage = _totalPages;
            await LoadData();
            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}

<style>
    #item-count-select {
        display: block;
    }

    .paging-text {
        margin: 0 5px;
    }

    .paging-btn {
        background-color: transparent;
        border: none;
        color: inherit;
        text-decoration: none;
        cursor: pointer;
        padding: 2px 6px;
        font-size: 12px;
        border-radius: 5px;
    }

    .paging-btn-primary {
        background-color: #007bff;
        color: white;
    }

    .paging-btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .paging-btn:disabled {
        background-color: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
    }
</style>
